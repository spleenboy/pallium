{"_id":"2eNjbNNTjHVcJdfv","contentType":"page","dirty":false,"title":"Field Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"field-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/field-types.md","metadata":{"Sequence":"3"},"values":{"title":"Field Types","template":"index.jade","sequence":3,"content":""}}
{"_id":"Ujg1iGixjNQ8sBFr","contentType":"page","dirty":false,"title":"Project File Format","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"project-file-format.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/project-file-format.md","metadata":{"Sequence":"1"},"values":{"title":"Project File Format","template":"index.jade","sequence":1,"content":"A Pallium project file is just a specially-formatted JSON file that defines how Pallium should display and store JSON or YAML-formatted files.\n\n\n## Document Root\nAt the root of the project file, you'll include some general information and a `contentTypes` object, which defines all of the content types that will be included in your project. Optionally, you may include a `references` object, which is just a way of creating snippets for re-use across multiple `contentType` definitions.\n\n```\n{\n  \"title\": \"Pallium Documentation\",\n  \"description\": \"Provide documentation for the Pallium application.\",\n  \"icon\": \"redeem\",\n  \"contentDirectory\": [\"content\"],\n  \"assetDirectory\": [\"content\", \"assets\"],\n  \"database\": [\"content\", \"index.db\"],\n  \"references\": {...},\n  \"contentTypes\": {...}\n}\n```\n### title\nThe title will identify your project.\n\n### description\nThis will appear below the title of your project on the home page of the Pallium app.\n\n\n### icon\nYou may use any class name from [Google's material design icon set](https://design.google.com/icons/) here.\n\n### contentDirectory\nThis array indicates the path (relative to the project file) where files managed by the project will be stored. Because this is a cross-platform application, you should save each directory as a separate item in the array. The application will handle joining the directories together in the right way for the OS being used.\n\n### assetDirectory\nLike the `contentDirectory`, this is a relative path used to store any files uploaded to the project.\n\n### database\nPallium uses a embedded NoSQL database to store information about your project files. This set of relative directories and a file name tells Pallium where to save this database file.\n\n### [references](./references)\nReferences are an advanced feature that you may use to store snippets of JSON for reuse within the `contentTypes` object.\n\n### [contentTypes](./content-types)\nEach content type may have a different set of fields, storage settings and file format. If you're setting up a project for a blog, for example, you may have content types for posts, external links, static pages, etc."}}
{"_id":"XYqakXQAfwiHlOq4","contentType":"page","dirty":false,"title":"Overview","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"overview.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/overview.md","metadata":{"Sequence":"0"},"values":{"title":"Overview","template":"index.jade","sequence":0,"content":"Pallium is a cross-platform desktop editor for JSON and YAML files. This application use a specially-formatted project file to present you with one or more custom forms.\n\nBecause of its flexible project format, it can be used for multiple purposes.\n\n## Website Content Management\nIt makes a great light-weight **content editor for websites**. This was its original purpose, actually. Combine it with a static site generator, such as Jekyl, Sculpin or Wintersmith, and you've got an easy to edit, static site on your hands. If you're reading this documentation in a browser, you're seeing the result of this workflow.\n\n## Note-taking\nPallium uses your filesystem and plain text files as its source of content. It includes an easy-to-use Markdown editor. Set up a configuration file that uses a synchronized directory, such as Dropbox or Google Drive, and you have a great tool for quick note taking."}}
{"_id":"eLg6FFtwzIoDW50D","contentType":"page","dirty":false,"title":"References","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"references.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/references.md","metadata":{"Sequence":"4"},"values":{"title":"References","template":"index.jade","sequence":4,"content":"Whenever you what to use a reference instead of a value, you'll write `{\"reference\": \"reference_key\"}`, where `reference_key` is the key you gave this snippet of JSON. For example, this:\n\n```\n{\n  \"references\": {\n    \"slug\": [\n      {\n        \"type\": \"required\"\n      },\n      {\n        \"type\": \"pattern\",\n        \"value\": \"^[a-z\\-]+$\"\n      }\n      ]\n    }\n  }\n```\n\nWill let you define a title field in a contentType like this:\n\n```\n{\n  \"contentTypes\": [\n    {\n      \"fields\": [\n        {\n          \"name\": \"url\",\n          \"label\": \"URL\",\n          \"validation\": {\n            \"reference\": \"slug\"\n          }\n      ]\n    }\n  ]\n}\n```"}}
{"_id":"wv6at3GFWrgE5MIl","contentType":"page","dirty":false,"title":"Content Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"content-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/content-types.md","metadata":{"Sequence":"2"},"values":{"title":"Content Types","template":"index.jade","sequence":2,"content":""}}
{"$$indexCreated":{"fieldName":"values.content","unique":false,"sparse":true}}
{"_id":"XYqakXQAfwiHlOq4","contentType":"page","dirty":false,"title":"Overview","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"overview.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/overview.md","metadata":{"Sequence":"0"},"values":{"title":"Overview","slug":{"type":"kebab","field":"title"},"sequence":0,"content":"Pallium is a cross-platform desktop editor for JSON and YAML files. This application use a specially-formatted project file to present you with one or more custom forms.\n\nBecause of its flexible project format, it can be used for multiple purposes.\n\n## Website Content Management\nIt makes a great light-weight **content editor for websites**. This was its original purpose, actually. Combine it with a static site generator, such as Jekyl, Sculpin or Wintersmith, and you've got an easy to edit, static site on your hands. If you're reading this documentation in a browser, you're seeing the result of this workflow.\n\n## Note-taking\nPallium uses your filesystem and plain text files as its source of content. It includes an easy-to-use Markdown editor. Set up a configuration file that uses a synchronized directory, such as Dropbox or Google Drive, and you have a great tool for quick note taking."}}
{"_id":"Ujg1iGixjNQ8sBFr","contentType":"page","dirty":false,"title":"Project File Format","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"project-file-format.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/project-file-format.md","metadata":{"Sequence":"1"},"values":{"title":"Project File Format","slug":{"type":"kebab","field":"title"},"sequence":1,"content":"A Pallium project file is just a specially-formatted JSON file that defines how Pallium should display and store JSON or YAML-formatted files.\n\n\n## Document Root\nAt the root of the project file, you'll include some general information and a `contentTypes` object, which defines all of the content types that will be included in your project. Optionally, you may include a `references` object, which is just a way of creating snippets for re-use across multiple `contentType` definitions.\n\n```\n{\n  \"title\": \"Pallium Documentation\",\n  \"description\": \"Provide documentation for the Pallium application.\",\n  \"icon\": \"redeem\",\n  \"contentDirectory\": [\"content\"],\n  \"assetDirectory\": [\"content\", \"assets\"],\n  \"database\": [\"content\", \"index.db\"],\n  \"references\": {...},\n  \"contentTypes\": {...}\n}\n```\n### title\nThe title will identify your project.\n\n### description\nThis will appear below the title of your project on the home page of the Pallium app.\n\n\n### icon\nYou may use any class name from [Google's material design icon set](https://design.google.com/icons/) here.\n\n### contentDirectory\nThis array indicates the path (relative to the project file) where files managed by the project will be stored. Because this is a cross-platform application, you should save each directory as a separate item in the array. The application will handle joining the directories together in the right way for the OS being used.\n\n### assetDirectory\nLike the `contentDirectory`, this is a relative path used to store any files uploaded to the project.\n\n### database\nPallium uses a embedded NoSQL database to store information about your project files. This set of relative directories and a file name tells Pallium where to save this database file.\n\n### [references](./references)\nReferences are an advanced feature that you may use to store snippets of JSON for reuse within the `contentTypes` object.\n\n### [contentTypes](./content-types)\nEach content type may have a different set of fields, storage settings and file format. If you're setting up a project for a blog, for example, you may have content types for posts, external links, static pages, etc."}}
{"_id":"wv6at3GFWrgE5MIl","contentType":"page","dirty":false,"title":"Content Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"content-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/content-types.md","metadata":{"Sequence":"2"},"values":{"title":"Content Types","slug":{"type":"kebab","field":"title"},"sequence":2,"content":""}}
{"_id":"2eNjbNNTjHVcJdfv","contentType":"page","dirty":false,"title":"Field Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"field-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/field-types.md","metadata":{"Sequence":"3"},"values":{"title":"Field Types","slug":{"type":"kebab","field":"title"},"sequence":3,"content":""}}
{"_id":"eLg6FFtwzIoDW50D","contentType":"page","dirty":false,"title":"References","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"references.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/references.md","metadata":{"Sequence":"4"},"values":{"title":"References","slug":{"type":"kebab","field":"title"},"sequence":4,"content":"Whenever you what to use a reference instead of a value, you'll write `{\"reference\": \"reference_key\"}`, where `reference_key` is the key you gave this snippet of JSON. For example, this:\n\n```\n{\n  \"references\": {\n    \"slug\": [\n      {\n        \"type\": \"required\"\n      },\n      {\n        \"type\": \"pattern\",\n        \"value\": \"^[a-z\\-]+$\"\n      }\n      ]\n    }\n  }\n```\n\nWill let you define a title field in a contentType like this:\n\n```\n{\n  \"contentTypes\": [\n    {\n      \"fields\": [\n        {\n          \"name\": \"url\",\n          \"label\": \"URL\",\n          \"validation\": {\n            \"reference\": \"slug\"\n          }\n      ]\n    }\n  ]\n}\n```"}}
{"_id":"XYqakXQAfwiHlOq4","contentType":"page","dirty":false,"title":"Overview","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"overview.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/overview.md","metadata":{"Sequence":"0"},"values":{"title":"Overview","slug":"overview","sequence":0,"content":"Pallium is a cross-platform desktop editor for JSON and YAML files. This application use a specially-formatted project file to present you with one or more custom forms.\n\nBecause of its flexible project format, it can be used for multiple purposes.\n\n## Website Content Management\nIt makes a great light-weight **content editor for websites**. This was its original purpose, actually. Combine it with a static site generator, such as Jekyl, Sculpin or Wintersmith, and you've got an easy to edit, static site on your hands. If you're reading this documentation in a browser, you're seeing the result of this workflow.\n\n## Note-taking\nPallium uses your filesystem and plain text files as its source of content. It includes an easy-to-use Markdown editor. Set up a configuration file that uses a synchronized directory, such as Dropbox or Google Drive, and you have a great tool for quick note taking."}}
{"_id":"Ujg1iGixjNQ8sBFr","contentType":"page","dirty":false,"title":"Project File Format","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"project-file-format.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/project-file-format.md","metadata":{"Sequence":"1"},"values":{"title":"Project File Format","slug":"file-format","sequence":1,"content":"A Pallium project file is just a specially-formatted JSON file that defines how Pallium should display and store JSON or YAML-formatted files.\n\n\n## Document Root\nAt the root of the project file, you'll include some general information and a `contentTypes` object, which defines all of the content types that will be included in your project. Optionally, you may include a `references` object, which is just a way of creating snippets for re-use across multiple `contentType` definitions.\n\n```\n{\n  \"title\": \"Pallium Documentation\",\n  \"description\": \"Provide documentation for the Pallium application.\",\n  \"icon\": \"redeem\",\n  \"contentDirectory\": [\"content\"],\n  \"assetDirectory\": [\"content\", \"assets\"],\n  \"database\": [\"content\", \"index.db\"],\n  \"references\": {...},\n  \"contentTypes\": {...}\n}\n```\n### title\nThe title will identify your project.\n\n### description\nThis will appear below the title of your project on the home page of the Pallium app.\n\n\n### icon\nYou may use any class name from [Google's material design icon set](https://design.google.com/icons/) here.\n\n### contentDirectory\nThis array indicates the path (relative to the project file) where files managed by the project will be stored. Because this is a cross-platform application, you should save each directory as a separate item in the array. The application will handle joining the directories together in the right way for the OS being used.\n\n### assetDirectory\nLike the `contentDirectory`, this is a relative path used to store any files uploaded to the project.\n\n### database\nPallium uses a embedded NoSQL database to store information about your project files. This set of relative directories and a file name tells Pallium where to save this database file.\n\n### [references](./references)\nReferences are an advanced feature that you may use to store snippets of JSON for reuse within the `contentTypes` object.\n\n### [contentTypes](./content-types)\nEach content type may have a different set of fields, storage settings and file format. If you're setting up a project for a blog, for example, you may have content types for posts, external links, static pages, etc."}}
{"_id":"Ujg1iGixjNQ8sBFr","contentType":"page","dirty":false,"title":"Project File Format","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"project-file-format.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/project-file-format.md","metadata":{"Sequence":"1"},"values":{"title":"Project File Format","slug":"project-file-format","sequence":1,"content":"A Pallium project file is just a specially-formatted JSON file that defines how Pallium should display and store JSON or YAML-formatted files.\n\n\n## Document Root\nAt the root of the project file, you'll include some general information and a `contentTypes` object, which defines all of the content types that will be included in your project. Optionally, you may include a `references` object, which is just a way of creating snippets for re-use across multiple `contentType` definitions.\n\n```\n{\n  \"title\": \"Pallium Documentation\",\n  \"description\": \"Provide documentation for the Pallium application.\",\n  \"icon\": \"redeem\",\n  \"contentDirectory\": [\"content\"],\n  \"assetDirectory\": [\"content\", \"assets\"],\n  \"database\": [\"content\", \"index.db\"],\n  \"references\": {...},\n  \"contentTypes\": {...}\n}\n```\n### title\nThe title will identify your project.\n\n### description\nThis will appear below the title of your project on the home page of the Pallium app.\n\n\n### icon\nYou may use any class name from [Google's material design icon set](https://design.google.com/icons/) here.\n\n### contentDirectory\nThis array indicates the path (relative to the project file) where files managed by the project will be stored. Because this is a cross-platform application, you should save each directory as a separate item in the array. The application will handle joining the directories together in the right way for the OS being used.\n\n### assetDirectory\nLike the `contentDirectory`, this is a relative path used to store any files uploaded to the project.\n\n### database\nPallium uses a embedded NoSQL database to store information about your project files. This set of relative directories and a file name tells Pallium where to save this database file.\n\n### [references](./references)\nReferences are an advanced feature that you may use to store snippets of JSON for reuse within the `contentTypes` object.\n\n### [contentTypes](./content-types)\nEach content type may have a different set of fields, storage settings and file format. If you're setting up a project for a blog, for example, you may have content types for posts, external links, static pages, etc."}}
{"_id":"wv6at3GFWrgE5MIl","contentType":"page","dirty":false,"title":"Content Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"content-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/content-types.md","metadata":{"Sequence":"2"},"values":{"title":"Content Types","slug":"content-types","sequence":2,"content":""}}
{"_id":"2eNjbNNTjHVcJdfv","contentType":"page","dirty":false,"title":"Field Types","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"field-types.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/field-types.md","metadata":{"Sequence":"3"},"values":{"title":"Field Types","slug":"field-types","sequence":3,"content":""}}
{"_id":"eLg6FFtwzIoDW50D","contentType":"page","dirty":false,"title":"References","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"references.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/references.md","metadata":{"Sequence":"4"},"values":{"title":"References","slug":"references","sequence":4,"content":"Whenever you what to use a reference instead of a value, you'll write `{\"reference\": \"reference_key\"}`, where `reference_key` is the key you gave this snippet of JSON. For example, this:\n\n```\n{\n  \"references\": {\n    \"slug\": [\n      {\n        \"type\": \"required\"\n      },\n      {\n        \"type\": \"pattern\",\n        \"value\": \"^[a-z\\-]+$\"\n      }\n      ]\n    }\n  }\n```\n\nWill let you define a title field in a contentType like this:\n\n```\n{\n  \"contentTypes\": [\n    {\n      \"fields\": [\n        {\n          \"name\": \"url\",\n          \"label\": \"URL\",\n          \"validation\": {\n            \"reference\": \"slug\"\n          }\n      ]\n    }\n  ]\n}\n```"}}
{"_id":"XYqakXQAfwiHlOq4","contentType":"page","dirty":false,"title":"Overview","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"overview.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/overview.md","metadata":{"Sequence":"0"},"values":{"title":"Overview","slug":"overview","sequence":0,"content":"Pallium is a cross-platform desktop editor for JSON and YAML files. This application use a specially-formatted project file to present you with one or more custom forms.\n\nBecause of its flexible project format, it can be used for multiple purposes.\n\n### Website Content Management\nIt makes a great light-weight **content editor for websites**. This was its original purpose, actually. Combine it with a static site generator, such as Jekyl, Sculpin or Wintersmith, and you've got an easy to edit, static site on your hands. If you're reading this documentation in a browser, you're seeing the result of this workflow.\n\n### Note-taking\nPallium uses your filesystem and plain text files as its source of content. It includes an easy-to-use Markdown editor. Set up a configuration file that uses a synchronized directory, such as Dropbox or Google Drive, and you have a great tool for quick note taking."}}
{"_id":"Ujg1iGixjNQ8sBFr","contentType":"page","dirty":false,"title":"Project File Format","directory":"pages","basedir":"/Users/barrett/Documents/Development/pallium/docs/content","filename":"project-file-format.md","fullpath":"/Users/barrett/Documents/Development/pallium/docs/content/pages/project-file-format.md","metadata":{"Sequence":"1"},"values":{"title":"Project File Format","slug":"project-file-format","sequence":1,"content":"A Pallium project file is just a specially-formatted JSON file that defines how Pallium should display and store JSON or YAML-formatted files.\n\n\n### Document Root\nAt the root of the project file, you'll include some general information and a `contentTypes` object, which defines all of the content types that will be included in your project. Optionally, you may include a `references` object, which is just a way of creating snippets for re-use across multiple `contentType` definitions.\n\n```\n{\n  \"title\": \"Pallium Documentation\",\n  \"description\": \"Provide documentation for the Pallium application.\",\n  \"icon\": \"redeem\",\n  \"contentDirectory\": [\"content\"],\n  \"assetDirectory\": [\"content\", \"assets\"],\n  \"database\": [\"content\", \"index.db\"],\n  \"references\": {...},\n  \"contentTypes\": {...}\n}\n```\n#### title\nThe title will identify your project.\n\n#### description\nThis will appear below the title of your project on the home page of the Pallium app.\n\n\n#### icon\nYou may use any class name from [Google's material design icon set](https://design.google.com/icons/) here.\n\n#### contentDirectory\nThis array indicates the path (relative to the project file) where files managed by the project will be stored. Because this is a cross-platform application, you should save each directory as a separate item in the array. The application will handle joining the directories together in the right way for the OS being used.\n\n#### assetDirectory\nLike the `contentDirectory`, this is a relative path used to store any files uploaded to the project.\n\n#### database\nPallium uses a embedded NoSQL database to store information about your project files. This set of relative directories and a file name tells Pallium where to save this database file.\n\n#### [references](./references)\nReferences are an advanced feature that you may use to store snippets of JSON for reuse within the `contentTypes` object.\n\n#### [contentTypes](./content-types)\nEach content type may have a different set of fields, storage settings and file format. If you're setting up a project for a blog, for example, you may have content types for posts, external links, static pages, etc."}}
